{"version":3,"sources":["Pathfinding/Algorithms/BFS.js","Pathfinding/Algorithms/DFS.js","Pathfinding/Node/Node.js","Pathfinding/Pathfinding.js","App.js","serviceWorker.js","index.js"],"names":["isValid","row","col","grid","length","isVisited","module","exports","bfs","startNode","finishNode","dx","dy","visitedNodesinOrder","queue","push","curNode","shift","type","i","newNode","previousNode","dfs","stack","temp","pop","Node","this","props","onMouseDown","onMouseEnter","onMouseUp","extraClassName","id","className","React","Component","Pathfinding","state","mouseIsPressed","myRef","createRef","rows","createCell","makeFirstGrid","setState","newGrid","getNewGridWithWallToggled","visitedNodesInOrder","shortestPathNodes","shortestPath","animateVisitedPath","console","log","updateState","setTimeout","node","checkStartEnd","document","getElementById","visualizeShortestPath","slice","startpoint","endpoint","onClick","visualizeBFS","visualizeDFS","clearBoard","ref","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","distance","Infinity","isWall","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.89a0754d.chunk.js","sourcesContent":["module.exports = {\r\n\r\n\r\nbfs :function (grid, startNode, finishNode){\r\n    var dx=[0,-1,0,1]\r\n    var dy =[1,0,-1,0]\r\n    var visitedNodesinOrder = []\r\n    var queue = [];\r\n    queue.push(startNode)\r\n    while (queue.length >0){\r\n       var curNode =  queue.shift()\r\n        if( curNode.type ==='end') return visitedNodesinOrder\r\n        if( grid[curNode.row][curNode.col].type ==='wall') continue\r\n        visitedNodesinOrder.push(curNode)\r\n\r\n        for (var i = 0; i< 4 ;i++){\r\n            if (isValid(curNode.row +dx[i],curNode.col+dy[i], grid)){\r\n                let newNode = grid[curNode.row +dx[i]][curNode.col+dy[i]]\r\n                newNode.previousNode = curNode\r\n                newNode.isVisited = true;\r\n                queue.push(newNode)\r\n\r\n        }\r\n\r\n\r\n\r\n}\r\n}\r\nreturn visitedNodesinOrder\r\n\r\n}\r\n\r\n}\r\nfunction isValid(row,col,grid) {\r\n    if(row < 0 || row >= grid.length|| col< 0|| col >= grid[0].length) return false\r\n    if(grid[row][col].isVisited ) return false\r\n\r\n    return true;\r\n}","module.exports = {\r\n\r\n\r\n    dfs :function (grid, startNode, finishNode){\r\n        var dy=[-1,0,1,0]\r\n        var dx =[0,1,0,-1]\r\n        var visitedNodesinOrder = []\r\n\r\nvar stack = [];\r\n        stack.push(startNode)\r\n        while (stack.length >0){\r\n            var temp = stack.pop()\r\n            temp.previousNode = curNode\r\n            temp.isVisited = true;\r\n            var curNode =  temp\r\n            visitedNodesinOrder.push(curNode)\r\n            if( curNode.type ==='end') return visitedNodesinOrder\r\n\r\n            for (var i = 0; i< 4 ;i++){\r\n                if (isValid(curNode.row +dx[i],curNode.col+dy[i], grid)){\r\n                    let newNode = grid[curNode.row +dx[i]][curNode.col+dy[i]]\r\n\r\n                    stack.push(newNode)\r\n\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n    }return visitedNodesinOrder\r\n\r\n}}\r\nfunction isValid(row,col,grid) {\r\n    if(row < 0 || row >= grid.length|| col < 0|| col >= grid[0].length) return false\r\n    if(grid[row][col].isVisited ) return false\r\n    if(grid[row][col].type ==='wall') return false\r\n\r\n    return true;\r\n}","import React from 'react'\r\nimport './Node.css';\r\n\r\n\r\nexport default class Node extends React.Component {\r\n\r\n    render() {\r\n\r\n        const {\r\n            col,\r\n            type,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n            row,\r\n        } = this.props;\r\n        var extraClassName ='' ;\r\n        if ( type === 'end'){\r\n            extraClassName = 'node-finish'\r\n        }else if (type === 'start'){\r\n            extraClassName= 'node-start'\r\n        }else if (type === 'empty') {\r\n            extraClassName ='node-empty'\r\n        }else if ( type === 'wall'){\r\n            extraClassName= 'node-wall'\r\n        }else if ( type === 'visited'){\r\n            extraClassName= 'node-visited'\r\n        }else if ( type === 'shortest'){\r\n            extraClassName= 'node-shortest'\r\n        }\r\n        return (\r\n            <div\r\n\r\n                id={`node-${row}-${col}`}\r\n                className={`node ${extraClassName}`}\r\n                onMouseDown={() => onMouseDown(row, col)}\r\n                onMouseEnter={() => onMouseEnter(row, col)}\r\n                onMouseUp={() => onMouseUp()}> </div>\r\n        );\r\n\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport Node from './Node/Node'\r\nimport './Pathfinding.css'\r\nimport {bfs} from './Algorithms/BFS'\r\nimport {dfs} from './Algorithms/DFS'\r\nconst START_NODE_ROW = 7;\r\nconst START_NODE_COL = 10;\r\nconst FINISH_NODE_ROW = 7;\r\nconst FINISH_NODE_COL = 35;\r\nexport default class Pathfinding extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            mouseIsPressed: false,\r\n        };\r\n        this.myRef = React.createRef();\r\n    }\r\n    componentDidMount() {\r\n        const grid = makeFirstGrid()\r\n        this.setState({grid})\r\n    }\r\n    handleMouseDown(row, col) {\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({grid: newGrid, mouseIsPressed: true});\r\n\r\n    }\r\n\r\n    handleMouseEnter(row, col) {\r\n        if (!this.state.mouseIsPressed) return;\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({grid: newGrid});\r\n    }\r\n\r\n    handleMouseUp() {\r\n        this.setState({mouseIsPressed: false});\r\n    }\r\n    visualizeBFS() {\r\n        const {grid} = this.state\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        const visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n        var shortestPathNodes = this.shortestPath(startNode,finishNode)\r\n        this.animateVisitedPath(visitedNodesInOrder,shortestPathNodes)\r\n\r\n    }\r\n    visualizeDFS() {\r\n        const {grid} = this.state\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        const visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n        console.log(visitedNodesInOrder[0])\r\n        console.log(visitedNodesInOrder[1])\r\n        console.log(visitedNodesInOrder[2])\r\n        var shortestPathNodes = this.shortestPath(startNode,finishNode)\r\n        this.animateVisitedPath(visitedNodesInOrder,shortestPathNodes)\r\n\r\n    }\r\n    visualizeShortestPath(shortestPathNodes) {\r\n        if(shortestPathNodes.length ===0) this.updateState()\r\n        for (let i = 0; i < shortestPathNodes.length; i++) {\r\n            setTimeout(() => {\r\n\r\n                const node = shortestPathNodes[i];\r\n                if (this.checkStartEnd(node.row,node.col)){\r\n\r\n                document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                    'node node-shortest';}\r\n            }, 20 * i)\r\n            if(i===shortestPathNodes.length-1){\r\n                this.updateState()\r\n            }\r\n        }\r\n    }\r\n    animateVisitedPath(visitedNodesInOrder, shortestPathNodes){\r\n\r\n         for (let i = 0; i < visitedNodesInOrder.length; i++) {\r\n\r\n             setTimeout(() => {\r\n                 const node = visitedNodesInOrder[i];\r\n                 if (this.checkStartEnd(node.row,node.col)\r\n                 ) {\r\n                     document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                         'node node-visited';\r\n\r\n                 }\r\n\r\n\r\n             }, 20 * i);\r\n             if (i === visitedNodesInOrder.length - 1) {\r\n                 setTimeout(() => {\r\n                     this.visualizeShortestPath(shortestPathNodes);\r\n                 }, 20 * i);\r\n                 return;\r\n             }\r\n\r\n         }\r\n    }\r\n    clearBoard(grid){\r\n        this.updateState()\r\n        const newGrid = grid.slice()\r\n\r\n        for (var row = 0; row < this.state.grid.length;row ++){\r\n            for (var col = 0; col < this.state.grid[0].length;col ++){\r\n                const node = newGrid[row][col];\r\n                let type;\r\n                if(node.type === 'start'){\r\n                    type = 'start'\r\n                }else if(node.type === 'end') {\r\n                    type = 'end'\r\n                }else{\r\n                    type = 'empty';\r\n                }\r\n                const newNode = {\r\n                    ...node,\r\n                    type :type,\r\n                    isVisited:false,\r\n                    previousNode:null\r\n\r\n                };\r\n\r\n                newGrid[row][col] = newNode;\r\n\r\n            }\r\n        }\r\n        newGrid[START_NODE_ROW][START_NODE_COL].type= 'start'\r\n        newGrid[FINISH_NODE_ROW][FINISH_NODE_COL].type= 'end'\r\n\r\n        document.getElementById(`node-${START_NODE_ROW}-${START_NODE_COL}`).className= 'node node-start'\r\n        document.getElementById(`node-${FINISH_NODE_ROW}-${ FINISH_NODE_COL}`).className= 'node node-finish'\r\n        this.setState({grid: newGrid});\r\n\r\n    }\r\n    shortestPath(startpoint ,endpoint) {\r\n        var  shortestPath = []\r\n        var temp = endpoint\r\n        if (endpoint.previousNode === null) return shortestPath\r\n        while(!(startpoint.row === temp.row && startpoint.col === temp.col) ){\r\n            shortestPath.push(temp)\r\n            temp = temp.previousNode;\r\n        }\r\n        shortestPath.push(startpoint)\r\n        return shortestPath\r\n    }\r\n    checkStartEnd(row,col){\r\n        if ((row === START_NODE_ROW && col === START_NODE_COL) ){\r\n            return false\r\n        }if(( row === FINISH_NODE_ROW && col === FINISH_NODE_COL)){\r\n            return false\r\n        }return true\r\n    }\r\n    updateState(){\r\n        let newGrid = this.state.grid\r\n        for (var row = 0; row < this.state.grid.length;row ++){\r\n            for (var col = 0; col < this.state.grid[0].length;col ++){\r\n                const node = newGrid[row][col];\r\n                if( document.getElementById(`node-${node.row}-${node.col}`).className=== 'node node-visited'){\r\n                    const newNode = {\r\n                        ...node,\r\n                        type :'visited',\r\n                    };\r\n                    newGrid[row][col] = newNode;\r\n                }else if( document.getElementById(`node-${node.row}-${node.col}`).className=== 'node node-shortest'){\r\n                    const newNode = {\r\n                        ...node,\r\n                        type :'shortest',\r\n                    };\r\n                    newGrid[row][col] = newNode;\r\n                }\r\n\r\n            }\r\n        }\r\n        newGrid[START_NODE_ROW][ START_NODE_COL].type= 'start'\r\n        newGrid[FINISH_NODE_ROW][ FINISH_NODE_COL].type= 'end'\r\n\r\n\r\n        this.setState({grid: newGrid});\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n      const {grid,mouseIsPressed} = this.state\r\n        return (\r\n            <>\r\n                <button onClick={() => this.visualizeBFS()}>\r\n                    Visualize Breadth First Search\r\n                </button>\r\n                <button onClick={() => this.visualizeDFS()}>\r\n                    Visualize Depth First Search\r\n                </button>\r\n                <button onClick={() => this.clearBoard(grid)}>\r\n                    Clear Board\r\n                </button>\r\n                <div className=\"grid\"  ref={this.myRef}>\r\n                    {grid.map((row, rowIdx) => {\r\n                        return (\r\n                            <div key={rowIdx}>\r\n                                {row.map((node, nodeIdx) => {\r\n                                    const {row, col, type} = node;\r\n                                    return (\r\n                                        <Node\r\n                                            key={nodeIdx}\r\n                                            col={col}\r\n                                            type ={type}\r\n                                            mouseIsPressed={mouseIsPressed}\r\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                            onMouseEnter={(row, col) =>\r\n                                                this.handleMouseEnter(row, col)\r\n                                            }\r\n                                            onMouseUp={() => this.handleMouseUp()}\r\n                                            row={row}> </Node>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\nfunction makeFirstGrid(){\r\n    const grid =[]\r\n    for (let row=0;row<15; row++){\r\n        let rows =[];\r\n        for (let col=0;col< 45; col++){\r\n            rows.push(createCell(row,col))\r\n        }grid.push(rows)\r\n    }\r\n    return grid;\r\n}\r\n\r\nfunction createCell(row,col) {\r\n    let type;\r\n    if (row === START_NODE_ROW && col === START_NODE_COL){\r\n        type  ='start'\r\n    }else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL){\r\n        type = 'end'\r\n    }else {\r\n        type ='empty'\r\n    }\r\n    return {\r\n\r\n        col,\r\n        row,\r\n        type,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    }\r\n}\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    let type;\r\n    if (node.type === 'wall'){\r\n        type  ='empty'\r\n    }else if(node.type === 'empty'){\r\n        type = 'wall'\r\n    }else {\r\n        type = node.type\r\n    }\r\n    const newNode = {\r\n        ...node,\r\n        type :type\r\n\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n};","import React from 'react';\nimport './App.css';\nimport Pathfinder from './Pathfinding/Pathfinding'\n\n\n\nfunction App() {\n  return (\n      < div className='App'>\n          <Pathfinder></Pathfinder>\n      </div>\n\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}